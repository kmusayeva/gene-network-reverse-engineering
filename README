This file describes how to create and call the gene network creation and the abc algorithms written
in C from R.


I Network generation algorithm
----------------------------------------------------

1. Create the shared object:

     MAKEFLAGS='CFLAGS=-Iinclude PKG_CFLAGS=-w' R CMD SHLIB src/network.c src/graph.c src/motif.c src/utils.c src/pool.c  -o network_R.so
	
2. Run the shared object from R:

 To load and run network_R.so from R follow these commands:
		
    dyn.load("network_R.so")
    result=.C("run", as.integer(number_genes), as.integer(clust_coef), network=as.integer(1:(number_genes*number_genes)))


 Explanation of the parameters:

 run: this is the C function to run the network generation.
 number_genes: the number of genes in the microarray data.
 clust_coef: a clustering coefficient for the modules in the network, for example 0.3.
 network: the generated network.

 Result:
 
 The generated network is saved in the "network" variable which is an one-dimensional array. 
 You can access it by typing result$network in R. 


II ABC Algorithm 
-----------------------------------------------------------

1. Create the shared object:

	MAKEFLAGS='CFLAGS=-Iinclude PKG_CFLAGS=-w' R CMD SHLIB src/network.c src/graph.c src/motif.c src/utils.c src/pool.c src/abc.c -o abc_R.so

2. Run the shared object from R:

 To load the shared object and call the abc method from R follow these commands:

	dyn.load("abc_R.so")
 	result=.C("abc", as.double(data), as.integer(number_genes), as.integer(number_times), as.integer(clust_size), as.double(clust_coeffs), as.double(tolerance), as.integer(number_hubs), as.integer(iterations), as.integer(number_networks), number_accepted=as.integer(0), dist=as.double(1:number_networks), hp=as.double(hub_probs), np=as.double(neighbour_probs), as.integer(is_probs))
  
  Explanation of the parameters:

  abc: the name of the C function abc.
  data: an one-dimensional microarray data. Any microarray data in the form of a matrix should be converted to one-dimensional array in a row-major format. An example data array based on microarray data is included in this package (microarray_for_R_example.txt).	
  number_genes: the number of genes in the microarray data.
  number_times: the number of time points in the microarray data.
  clust_size: the number of clustering coefficients (this is the size of the array clust_coeffs).
  clust_coeffs: an one dimensional array of size clust_size of clustering coefficients.  
  tolerance: a real value based on which the generated networks are compared to the reference network
  number_hubs: the number of hubs in the network. Example: 3, 4, ...
  iterations: the number of times to repeat ABC algorithm. Example: 5, 20, ...
  number_networks: the number of generated networks in each iteration of the ABC algorithm. Example: 10000, 50000, 1000000, ... 
  number_accepted: restores the number of accepted networks in the last iteration of the ABC algorithm
  hub_probs: an one-dimensional array of size number_genes for the each label to be in the role of a hub; example file hub_probs_example.txt
  neighbour_probs: this is an one-dimensional array of the neighbour probabilities of size number_nodes*number_nodes; example file neighbour_probs_example.txt
  is_probs: this needs to be set  either to one (if you specify hub_probs and neighbour_probs) or to zero (if neither probabilities are specified). 
  attention: you should specify both hub_probs and neighbour_probs if is_probs is one. If is_prob is zero these arrays should simply indicate an array of a specified size, for example, hub_probs=as.double(1:number_genes).

